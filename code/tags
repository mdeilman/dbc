!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARR_SIZE	.\test.h	14;"	d
Address	.\dbc.h	/^struct Address {$/;"	s
Address_print	.\dbc.h	/^void Address_print(struct Address *addr){$/;"	f
CommonCompilerFlags	.\cl_build.bat	/^REM set CommonCompilerFlags=-Od -MTd -nologo -fp:fast -fp:except- -Gm- -GR- -EHa- -Zo -Oi -W4 -wd4201 -wd4100 -wd4189 -wd4505 -wd4127 -wd4996 -wd4204 -FC -Z7$/;"	v
CommonCompilerFlags	.\cl_build.bat	/^set CommonCompilerFlags=-DDEBUG=0 %CommonCompilerFlags%$/;"	v
CommonCompilerFlags	.\cl_build.bat	/^set CommonCompilerFlags=-Od -nologo -fp:fast -fp:except- -Gm- -GR- -EHa- -Zo -Oi -W4 -wd4996 -wd4204 -Z7$/;"	v
CommonCompilerFlags	.\gcc_build.bat	/^set CommonCompilerFlags=-DDEBUG=1 %CommonCompilerFlags%$/;"	v
CommonCompilerFlags	.\gcc_build.bat	/^set CommonCompilerFlags=-Wall -Wextra -std=c99 -g -Wno-sign-compare$/;"	v
CommonLinkerFlags	.\cl_build.bat	/^set CommonLinkerFlags= -incremental:no -opt:ref$/;"	v
CommonLinkerFlags	.\gcc_build.bat	/^set CommonLinkerFlags=$/;"	v
Connection	.\dbc.h	/^struct Connection {$/;"	s
DBC_H_	.\dbc.h	2;"	d
Database	.\dbc.h	/^struct Database {$/;"	s
Database_close	.\dbc.h	/^void Database_close(struct Connection *conn){$/;"	f
Database_create	.\dbc.h	/^void Database_create(struct Connection *conn){$/;"	f
Database_delete	.\dbc.h	/^void Database_delete(struct Connection *conn, int id){$/;"	f
Database_get	.\dbc.h	/^void Database_get(struct Connection *conn, int id){$/;"	f
Database_list	.\dbc.h	/^void Database_list(struct Connection *conn){$/;"	f
Database_load	.\dbc.h	/^void Database_load(struct Connection *conn){$/;"	f
Database_open	.\dbc.h	/^struct Connection *Database_open(const char *filename, char mode){$/;"	f
Database_set	.\dbc.h	/^void Database_set(struct Connection *conn, int id, const char *name, const char *email){$/;"	f
Database_write	.\dbc.h	/^void Database_write(struct Connection *conn){$/;"	f
LastError	.\cl_build.bat	/^set LastError=%ERRORLEVEL%$/;"	v
LastError	.\gcc_build.bat	/^set LastError=%ERRORLEVEL%$/;"	v
MAX_DATA	.\dbc.h	27;"	d
MAX_ROWS	.\dbc.h	30;"	d
NOTUSED	.\dbc.h	41;"	d
Process_action	.\dbc.h	/^void Process_action(char action, char *name, char *email, struct Connection *conn, int id){$/;"	f
RELEASE	.\dbc.h	32;"	d
REVISION	.\dbc.h	33;"	d
TEST	.\dbc.h	37;"	d
TEST_H_	.\test.h	2;"	d
UNUSED	.\dbc.h	40;"	d
Wildcard	.\static_check.bat	/^set Wildcard=*.h *.cpp *.inl *.c$/;"	v
Wildcard	.\todo.bat	/^set Wildcard=*.h *.cpp *.inl *.c$/;"	v
Wildcard	.\todo_check.bat	/^set Wildcard=*.h *.cpp *.inl *.c$/;"	v
__USE_MINGW_ANSI_STDIO	.\dbc.c	8;"	d	file:
db	.\dbc.h	/^    struct Database *db;$/;"	m	struct:Connection	typeref:struct:Connection::Database
db_curr_pos	.\dbc.h	/^    int db_curr_pos;$/;"	m	struct:db_info
db_info	.\dbc.h	/^struct db_info {$/;"	s
db_size	.\dbc.h	/^    int db_size;$/;"	m	struct:db_info
die	.\dbc.h	/^void die(const char *message){$/;"	f
email	.\dbc.h	/^    char email[MAX_DATA];$/;"	m	struct:Address
email_arr	.\test.h	/^char* email_arr[] = {"Peter@yahho.de", "Paul@gmx.de", "Mary@yahoo.de", "Pipi@microsoft.com", "Kaka@apple.com", "none", "Mario@nds.com", "Zed@empire.co.uk", "Paula@goolge.com"};$/;"	v
ends	.\dbc.h	/^    char ends;$/;"	m	struct:Address
file	.\dbc.h	/^    FILE *file;$/;"	m	struct:Connection
id	.\dbc.h	/^    int id;$/;"	m	struct:Address
log_msg	.\dbc.h	/^void log_msg(const char *message){$/;"	f
log_test	.\dbc.h	/^void log_test(const char *message){$/;"	f
main	.\dbc.c	/^int main(int argc, char *argv[]){$/;"	f
name	.\dbc.h	/^    char name[MAX_DATA];$/;"	m	struct:Address
name_arr	.\test.h	/^char* name_arr[] = {"Peter", "Paul", "Mary", "Pipi", "Kaka", "empty", "Mario", "Zed", "Paula"};$/;"	v
rows	.\dbc.h	/^    struct Address rows[MAX_ROWS];$/;"	m	struct:Database	typeref:struct:Database::Address
run_test	.\test.h	/^void run_test(int nb_runs){$/;"	f
set	.\dbc.h	/^    int set;$/;"	m	struct:Address
stop_test	.\dbc.h	/^void stop_test(){$/;"	f
strt	.\dbc.h	/^    char strt;$/;"	m	struct:Address
test_run	.\test.h	/^void test_run(struct Connection *conn, int id, int runs){$/;"	f
test_setup	.\test.h	/^void test_setup(struct Connection *conn, int id){$/;"	f
test_teardown	.\test.h	/^void test_teardown(struct Connection *conn){$/;"	f
